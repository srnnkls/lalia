[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "lalia"
requires-python = ">=3.11"
keywords = []
dependencies = [
  "jsonref",
  "openai",
  "pydantic",
  "rich",
  "ruamel.yaml",
  "ruamel.yaml.string",
  "tiktoken",
  "typing-extensions>=4.12.2 ; python_full_version < '3.12'",
]
dynamic = [
  "version"
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
include = [
  "src/lalia",
]

[tool.hatch.build.sources]
"src/lalia" = "lalia"

[dependency-groups]
dev = [
  "hypothesis",
  "hypothesis-jsonschema",
  "ipykernel",
  "ipython",
  "pytest",
  "pytest-cov",
  "ruff>=0.2.0",
]

[tool.hatch.version.raw-options]
local_scheme = "no-local-version"

[tool.ruff]
line-length = 88
exclude = ["src/lalia/io/models"]

[tool.ruff.lint]
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow for string literals in exceptions
  "EM",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.lint.isort]
known-first-party = ["lalia"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ['lalia.utils.decorators.classproperty']

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pytest.ini_options]
addopts = [
    "-m not openai and not exact_tokens",
    "--cov=lalia",
]
markers = [
    "openai: tests that require interactions with the openai api",
    "exact_tokens: tests that require exact token counts",
]
